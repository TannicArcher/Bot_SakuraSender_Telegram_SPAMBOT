from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import CallbackQuery
from proxy_checker import ProxyChecker
from telethon import TelegramClient

from data.config import ADMINS, api_id, api_hash
from filters import IsNotSubscribed
from keyboards.inline.menu import admin_menu, main_menu, back_to_main_menu
from loader import dp
from utils.db_api.db_commands import *
from utils.other_utils import get_user_date, send_message_to_chat


@dp.callback_query_handler(IsNotSubscribed())
async def answer_call(call: CallbackQuery):
    await call.answer("‚ùóÔ∏è–£ –≤–∞—Å –Ω–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")


# ========================DELETE BROADCAST MESSAGE========================
# WITH STATE
@dp.callback_query_handler(text="delete_this_message", state="*")
async def del_broadcast_msg(call: CallbackQuery):
    await call.message.delete()


# ========================SHOW MAIN MENU========================
# /start WITHOUT STATE
@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    if not await select_user(message.from_user.id):
        await add_user(message.from_user.id)
    stat, user = await select_statistic(), await select_user(message.from_user.id)
    result_date = await get_user_date(message.from_user.id)
    proxy = await select_user_proxy(message.from_user.id)
    await message.answer(text=f"<b> #—Å–ª–∏—Ç–æ –≤ @end_software ü§ñ–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {stat[0]}\n"
                              f"‚ò¢Ô∏è–°–¥–µ–ª–∞–Ω–æ –∞—Ç–∞–∫: {stat[1]}\n\n"
                              f"‚úâÔ∏è–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stat[2]}\n"
                              f"üß¨–ü—Ä–æ–∫—Å–∏: {'‚úîÔ∏è–ï—Å—Ç—å' if proxy else '‚ùóÔ∏è–ù–µ—Ç—É'}\n"
                              f"üîì–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {result_date}\n"
                              f"‚ôªÔ∏è–í—ã—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ —Å–ø–∞–º–∞: {'‚úÖ' if user[6] == 1 else '‚õîÔ∏è'}</b>",
                         reply_markup=await main_menu(message.from_user.id))


@dp.callback_query_handler(text="back_to_main_menu", state="*")
async def support(call: CallbackQuery, state: FSMContext):
    await state.finish()
    user = await select_user(call.from_user.id)
    stat, proxy = await select_statistic(), await select_user_proxy(call.from_user.id)
    result_date = await get_user_date(call.from_user.id)
    if not call.message.photo:
        await call.message.edit_text(text=f"<b>ü§ñ–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {stat[0]}\n"
                                          f"‚ò¢Ô∏è–°–¥–µ–ª–∞–Ω–æ –∞—Ç–∞–∫: {stat[1]}\n\n"
                                          f"‚úâÔ∏è–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stat[2]}\n"
                                          f"üß¨–ü—Ä–æ–∫—Å–∏: {'‚úîÔ∏è–ï—Å—Ç—å' if proxy else '‚ùóÔ∏è–ù–µ—Ç—É'}\n"
                                          f"üîì–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {result_date}\n"
                                          f"‚ôªÔ∏è–í—ã—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ —Å–ø–∞–º–∞: {'‚úÖ' if user[6] == 1 else '‚õîÔ∏è'}</b>",
                                     reply_markup=await main_menu(call.from_user.id))
    else:
        await call.message.delete()
        await call.message.answer(text=f"<b>ü§ñ–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {stat[0]}\n"
                                       f"‚ò¢Ô∏è–°–¥–µ–ª–∞–Ω–æ –∞—Ç–∞–∫: {stat[1]}\n\n"
                                       f"‚úâÔ∏è–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stat[2]}\n"
                                       f"üß¨–ü—Ä–æ–∫—Å–∏: {'‚úîÔ∏è–ï—Å—Ç—å' if proxy else '‚ùóÔ∏è–ù–µ—Ç—É'}\n"
                                       f"üîì–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {result_date}\n"
                                       f"‚ôªÔ∏è–í—ã—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ —Å–ø–∞–º–∞: {'‚úÖ' if user[6] == 1 else '‚õîÔ∏è'}</b>",
                                  reply_markup=await main_menu(call.from_user.id))


# BACK FROM ANY HANDLER TO MAIN MENU WITH STATE
@dp.callback_query_handler(text="back_admin", state="*")
async def support(call: CallbackQuery, state: FSMContext):
    await state.finish()
    if str(call.from_user.id) in ADMINS:
        await call.message.edit_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu)


# ========================INFO BUTTON========================
@dp.callback_query_handler(text="inf")
async def support(call: CallbackQuery):
    await call.message.edit_text(
        "<b>üëã –ü—Ä–∏–≤–µ—Ç, –¥–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–≤—Ç–æ~–ø–æ—Å—Ç–∏–Ω–≥–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞!\n\n"
        "‚ôªÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª—é–±–æ–º—É —é–∑–µ—Ä—É —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!\n"
        "‚ôªÔ∏è –î–æ–±–∞–≤–ª—è—Ç—å —Ö–æ—Ç—å 100 —á–∞—Ç–æ–≤ (–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)\n"
        "‚ôªÔ∏è–í–∫–ª—é—á–∞—Ç—å / –æ—Ç–∫–ª—é—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "‚ôªÔ∏è–ú–µ–Ω—è—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–¥–µ—Ä–∂–∫–∏ / —Ç–µ–∫—Å—Ç / —Ñ–æ—Ç–æ / –∏ –¥—Ä—É–≥–∏–µ!\n\n"
        "üöÄ–£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>",
        reply_markup=back_to_main_menu)
