import os
from datetime import datetime, timedelta

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from proxy_checker import ProxyChecker
from telethon import TelegramClient

from keyboards.inline.menu import back_to_main_menu, api_hash, api_id, code_menu, \
    main_menu, proxy_menu, start_spam_menu, accept_spam_menu
from loader import dp, scheduler
from states.states import AddAccount, DelAcc, AddProxy, DelProxy, SpamChat, SpamUser, SpamBot
from utils.db_api.db_commands import *
# ===============CHATS===========
# SHOW ALL CHATS
from utils.other_utils import get_user_date, send_message_to_chat, stop_job


@dp.callback_query_handler(text="del_all_accs")
async def del_account(call: CallbackQuery, state: FSMContext):
    all_accs = await select_user_accounts(call.from_user.id)
    for acc in all_accs:
        await del_acc(call.from_user.id, acc[1])
        os.remove(f"sessions/{acc[1]}.session")
    await call.message.edit_text("<b>–í—Å–µ –≤–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã —É–¥–∞–ª–µ–Ω–Ω—ã</b>",
                                 reply_markup=back_to_main_menu)


@dp.callback_query_handler(text="del_acc")
async def del_account(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
                                 reply_markup=back_to_main_menu)
    await DelAcc.D1.set()
    await state.update_data(msg_to_edit=call)


@dp.message_handler(state=DelAcc.D1)
async def del_account(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    job = scheduler.get_job(job_id=str(message.from_user.id))
    await message.delete()
    if not job:
        if await get_acc_num(message.from_user.id, message.text):
            await del_acc(message.from_user.id, message.text)
            os.remove(f"sessions/{message.text}.session")
            await state.finish()
            await msg_to_edit.message.edit_text("<b>–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω</b>", reply_markup=back_to_main_menu)
        else:
            await msg_to_edit.message.answer(text="‚ùóÔ∏è–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await msg_to_edit.message.answer(text="‚ùóÔ∏è–í–∞—à–∞ —Å–ø–∞–º-–∞—Ç–∞–∫–∞ —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–∞, "
                                              "—Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è.", show_alert=True)
        await state.finish()


@dp.callback_query_handler(text="leave")
async def leave(call: CallbackQuery):
    user = await select_user(call.from_user.id)
    if user[6] == 0:
        await update_leave(call.from_user.id, 1)
    else:
        await update_leave(call.from_user.id, 0)
    user = await select_user(call.from_user.id)
    stat = await select_statistic()
    result_date = await get_user_date(call.from_user.id)
    await call.message.edit_text(text=f"<b>ü§ñ–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {stat[0]}\n"
                                      f"‚ò¢Ô∏è–°–¥–µ–ª–∞–Ω–æ –∞—Ç–∞–∫: {stat[1]}\n\n"
                                      f"‚úâÔ∏è–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stat[2]}\n"
                                      f"üß¨–ü—Ä–æ–∫—Å–∏: {'‚úîÔ∏è–ï—Å—Ç—å' if user[5] else '‚ùóÔ∏è–ù–µ—Ç—É'}\n"
                                      f"üîì–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {result_date}\n"
                                      f"‚ôªÔ∏è–í—ã—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ —Å–ø–∞–º–∞: {'‚úÖ' if user[6] == 1 else '‚õîÔ∏è'}</b>",
                                 reply_markup=await main_menu(call.from_user.id))


@dp.callback_query_handler(text="stop_spam")
async def leave(call: CallbackQuery):
    job = scheduler.get_job(job_id=str(call.from_user.id))
    if job:
        job.remove()
        await call.answer("‚ùóÔ∏è–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        await call.answer("‚ùóÔ∏è–ù–µ—Ç—É –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–∞–º-–∞—Ç–∞–∫–∏")


@dp.callback_query_handler(text="proxy_settings")
async def leave(call: CallbackQuery):
    await call.message.edit_text("<b>üß¨–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –ü—Ä–æ–∫—Å–∏!</b>\n"
                                 "–í—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=proxy_menu)


@dp.callback_query_handler(text="add_proxy")
async def add_new_proxy(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("<b>‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ IPV4 –í —Ñ–æ—Ä–º–∞—Ç–µ: ip:port</b>",
                                 reply_markup=back_to_main_menu)
    await AddProxy.P1.set()
    await state.update_data(msg=call)


@dp.message_handler(state=AddProxy.P1)
async def add_new_proxy(message: Message, state: FSMContext):
    data = await state.get_data()
    msg = data.get("msg")
    user = await select_user(message.from_user.id)
    await message.delete()
    checker = ProxyChecker()
    info = checker.check_proxy(proxy=message.text)
    if info:
        await add_proxy(message.from_user.id, message.text)
        await msg.message.edit_text("<b>–ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã</b>", reply_markup=back_to_main_menu)
        await state.finish()
    else:
        await msg.message.answer("‚ùóÔ∏è–ù–µ –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    await message.delete()


@dp.callback_query_handler(text="del_proxy")
async def add_new_proxy(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("<b>‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ IPV4 –í —Ñ–æ—Ä–º–∞—Ç–µ: user:pass@ip:port</b>",
                                 reply_markup=back_to_main_menu)
    await DelProxy.P1.set()
    await state.update_data(msg=call)


@dp.message_handler(state=DelProxy.P1)
async def add_new_proxy(message: Message, state: FSMContext):
    data = await state.get_data()
    msg = data.get("msg")
    proxy = message.text
    if await select_proxy(message.from_user.id, proxy):
        await del_proxy(message.from_user.id, proxy)
        await msg.message.edit_text("<b>–ü—Ä–æ–∫—Å–∏ —É–¥–∞–ª–µ–Ω–Ω—ã</b>", reply_markup=back_to_main_menu)
        await state.finish()
    else:
        await msg.message.answer("‚ùóÔ∏è–¢–∞–∫–∏—Ö –ø—Ä–æ–∫—Å–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    await message.delete()


@dp.callback_query_handler(text="start_spam")
async def start_spam(call: CallbackQuery):
    await call.message.edit_text("üöÄ–í—ã–±–µ—Ä–µ—Ç–µ –∫—É–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–∞—à—É –∞—Ç–∞–∫—É!", reply_markup=start_spam_menu)


@dp.callback_query_handler(text_startswith="spam:")
async def start_spam(call: CallbackQuery, state: FSMContext):
    option = call.data.split(":")[1]
    if option == "chat":
        text = "üöÄ–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç: (–∫—Ä–∞–π–Ω–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —á–∞—Ç–æ–≤)"
        await SpamChat.S1.set()
    elif option == "user":
        text = "üöÄ–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Å–ø–∞–º–∏—Ç—å: "
        await SpamUser.S1.set()
    else:
        text = "üöÄ–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞:"
        await SpamBot.S1.set()
    msg_to_edit = await call.message.edit_text(text, reply_markup=back_to_main_menu)
    await state.update_data(msg_to_edit=msg_to_edit)


@dp.message_handler(state=SpamBot.S1)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    url = message.text
    await SpamBot.next()
    await state.update_data(url=url)
    await msg_to_edit.edit_text(text="‚è∞–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: (–æ—Ç 1 –¥–æ 60)",
                                reply_markup=back_to_main_menu)
    await message.delete()


@dp.message_handler(state=SpamBot.S2)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    try:
        interval = int(message.text)
        if 1 <= interval <= 60:
            await SpamBot.next()
            await state.update_data(interval=interval)
            await msg_to_edit.edit_text(text="üî∞–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –∞—Ç–∞–∫–∞:",
                                        reply_markup=back_to_main_menu)
        else:
            await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    except ValueError:
        await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    await message.delete()


@dp.message_handler(state=SpamBot.S3)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time = data.get("interval"), message.text
    await SpamBot.next()
    await state.update_data(time=time)
    await msg_to_edit.edit_text(text=f"<b>üì®–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ø–∞–º–∞:</b>\n"
                                     f"‚óΩÔ∏è–£—Å–ª—É–≥–∞: üí¨–í —á–∞—Ç\n"
                                     f"‚óΩÔ∏è–¢–µ–∫—Å—Ç:\n{msg_txt}\n"
                                     f"‚óΩÔ∏è–§–æ—Ç–æ: -\n"
                                     f"‚óΩÔ∏è–ó–∞–¥–µ—Ä–∂–∫–∞: {interval} –°–µ–∫—É–Ω–¥\n"
                                     f"‚óΩÔ∏è–í—Ä–µ–º—è —Å–ø–∞–º–∞: {time} –°–µ–∫—É–Ω–¥",
                                reply_markup=accept_spam_menu)
    await message.delete()


@dp.callback_query_handler(state=SpamBot.S4)
async def accept_spam(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time = data.get("interval"), data.get("time")
    await state.finish()
    scheduler.add_job(
                send_message_to_chat,
                "interval", seconds=interval,
                args=(call.from_user.id, url, "/start"),
                id=f"{call.from_user.id}"
            )
    scheduler.add_job(stop_job, "date", run_date=datetime.now() + timedelta(seconds=int(time)),
                      args=(call.from_user.id,))
    await call.message.edit_text("<b>–°–ø–∞–º-–∞—Ç–∞–∫–∞ –Ω–∞—á–∞—Ç–∞</b>", reply_markup=back_to_main_menu)
    await update_attacks()


@dp.message_handler(state=SpamUser.S1)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    url = message.text
    await SpamUser.next()
    await state.update_data(url=url)
    await msg_to_edit.edit_text(text="‚úâÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è:",
                                reply_markup=back_to_main_menu)
    await message.delete()


@dp.message_handler(state=SpamUser.S2)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    msg_txt = message.text
    await SpamUser.next()
    await state.update_data(msg_txt=msg_txt)
    await msg_to_edit.edit_text(text="‚è∞–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: (–æ—Ç 1 –¥–æ 60)",
                                reply_markup=back_to_main_menu)
    await message.delete()


@dp.message_handler(state=SpamUser.S3)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    try:
        interval = int(message.text)
        if 1 <= interval <= 60:
            await SpamUser.next()
            await state.update_data(interval=interval)
            await msg_to_edit.edit_text(text="üî∞–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –∞—Ç–∞–∫–∞:",
                                        reply_markup=back_to_main_menu)
        else:
            await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    except ValueError:
        await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    await message.delete()


@dp.message_handler(state=SpamUser.S4)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time = data.get("interval"), message.text
    await SpamUser.next()
    await state.update_data(time=time)
    await msg_to_edit.edit_text(text=f"<b>üì®–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ø–∞–º–∞:</b>\n"
                                     f"‚óΩÔ∏è–£—Å–ª—É–≥–∞: üí¨–í —á–∞—Ç\n"
                                     f"‚óΩÔ∏è–¢–µ–∫—Å—Ç:\n{msg_txt}\n"
                                     f"‚óΩÔ∏è–§–æ—Ç–æ: -\n"
                                     f"‚óΩÔ∏è–ó–∞–¥–µ—Ä–∂–∫–∞: {interval} –°–µ–∫—É–Ω–¥\n"
                                     f"‚óΩÔ∏è–í—Ä–µ–º—è —Å–ø–∞–º–∞: {time} –°–µ–∫—É–Ω–¥",
                                reply_markup=accept_spam_menu)
    await message.delete()


@dp.callback_query_handler(state=SpamUser.S5)
async def accept_spam(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time, photo = data.get("interval"), data.get("time"), data.get("photo")
    await state.finish()
    scheduler.add_job(
                send_message_to_chat,
                "interval", seconds=interval,
                args=(call.from_user.id, url, msg_txt),
                id=f"{call.from_user.id}"
            )
    scheduler.add_job(stop_job, "date", run_date=datetime.now() + timedelta(seconds=int(time)),
                      args=(call.from_user.id,))
    await call.message.edit_text("<b>–°–ø–∞–º-–∞—Ç–∞–∫–∞ –Ω–∞—á–∞—Ç–∞</b>", reply_markup=back_to_main_menu)
    await update_attacks()


@dp.message_handler(state=SpamChat.S1)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    url = message.text
    await SpamChat.next()
    await state.update_data(url=url)
    await msg_to_edit.edit_text(text="‚úâÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è:",
                                reply_markup=back_to_main_menu)
    await message.delete()


@dp.message_handler(state=SpamChat.S2)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    msg_txt = message.text
    await SpamChat.next()
    await state.update_data(msg_txt=msg_txt)
    await msg_to_edit.edit_text(text="‚è∞–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: (–æ—Ç 1 –¥–æ 60)",
                                reply_markup=back_to_main_menu)
    await message.delete()


@dp.message_handler(state=SpamChat.S3)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    try:
        interval = int(message.text)
        if 1 <= interval <= 60:
            await SpamChat.next()
            await state.update_data(interval=interval)
            await msg_to_edit.edit_text(text="üî∞–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –∞—Ç–∞–∫–∞:",
                                        reply_markup=back_to_main_menu)
        else:
            await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    except ValueError:
        await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    await message.delete()


@dp.message_handler(state=SpamChat.S4)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    try:
        time = int(message.text)
        await SpamChat.next()
        await state.update_data(time=time)
        await msg_to_edit.edit_text(text="üñº–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n"
                                         "üìñ–°–æ–∑–¥–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç: @imgurbot_bot\n\n"
                                         "–ù–∞–ø–∏—à–∏—Ç–µ - —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
                                    reply_markup=back_to_main_menu)

    except ValueError:
        await msg_to_edit.answer("<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>")
    await message.delete()


@dp.message_handler(state=SpamChat.S5)
async def spam_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time, photo = data.get("interval"), data.get("time"), message.text
    await SpamChat.next()
    if photo == "-":
        photo = None
    await state.update_data(photo=photo)
    await msg_to_edit.edit_text(text=f"<b>üì®–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ø–∞–º–∞:</b>\n"
                                     f"‚óΩÔ∏è–£—Å–ª—É–≥–∞: üí¨–í —á–∞—Ç\n"
                                     f"‚óΩÔ∏è–¢–µ–∫—Å—Ç:\n{msg_txt}\n"
                                     f"‚óΩÔ∏è–§–æ—Ç–æ: {photo}\n"
                                     f"‚óΩÔ∏è–ó–∞–¥–µ—Ä–∂–∫–∞: {interval} –°–µ–∫—É–Ω–¥\n"
                                     f"‚óΩÔ∏è–í—Ä–µ–º—è —Å–ø–∞–º–∞: {time} –°–µ–∫—É–Ω–¥",
                                reply_markup=accept_spam_menu)
    await message.delete()


@dp.callback_query_handler(state=SpamChat.S6)
async def accept_spam(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, url, msg_txt = data.get("msg_to_edit"), data.get("url"), data.get("msg_txt")
    interval, time, photo = data.get("interval"), data.get("time"), data.get("photo")
    await state.finish()
    scheduler.add_job(
                send_message_to_chat,
                "interval", seconds=interval,
                args=(call.from_user.id, url, msg_txt, photo),
                id=f"{call.from_user.id}"
            )
    scheduler.add_job(stop_job, "date", run_date=datetime.now() + timedelta(seconds=time), args=(call.from_user.id,))
    await call.message.edit_text("<b>–°–ø–∞–º-–∞—Ç–∞–∫–∞ –Ω–∞—á–∞—Ç–∞</b>", reply_markup=back_to_main_menu)
    await update_attacks()


# ===============ADD/CHANGE ACCOUNT===========
@dp.callback_query_handler(text="add_account")
async def show_all_chats(call: CallbackQuery, state: FSMContext):
    msg_to_edit = await call.message.edit_text("<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞. –í —Ñ–æ—Ä–º–∞—Ç–µ +7987678990</b>",
                                               reply_markup=back_to_main_menu)
    await AddAccount.A1.set()
    await state.update_data(msg_to_edit=msg_to_edit)


@dp.message_handler(state=AddAccount.A1)
async def receive_number(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    number = message.text
    await message.delete()
    if os.path.exists(f"sessions/{number}.session"):
        os.remove(f"sessions/{number}.session")
        await update_session(number, None)
    client = TelegramClient(f"sessions/{number}", api_id, api_hash)
    await client.connect()
    sent = await client.send_code_request(phone=number)
    await client.disconnect()
    await msg_to_edit.edit_text(f"<b>–í—ã —É–∫–∞–∑–∞–ª–∏ <code>{number}</code>\n"
                                f"–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –∫–æ–¥–∞:</b>",
                                reply_markup=code_menu)
    await AddAccount.next()
    await state.update_data(number=number, sent=sent, code_hash=sent.phone_code_hash)


@dp.callback_query_handler(text_startswith="code_number:", state=AddAccount.A2)
async def receive_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    num_1 = call.data.split(":")[1]
    await msg_to_edit.edit_text(f"<b>–ö–æ–¥ –±—É–¥–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —Ç—É—Ç: <code>{num_1}</code></b>", reply_markup=code_menu)
    await AddAccount.next()
    await state.update_data(num_1=num_1)


@dp.callback_query_handler(text_startswith="code_number:", state=AddAccount.A3)
async def receive_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, num_1 = data.get("msg_to_edit"), data.get("num_1")
    num_2 = call.data.split(":")[1]
    code = num_1 + num_2
    await msg_to_edit.edit_text(f"<b>–ö–æ–¥ –±—É–¥–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —Ç—É—Ç: <code>{code}</code></b>", reply_markup=code_menu)
    await AddAccount.next()
    await state.update_data(num_2=num_2)


@dp.callback_query_handler(text_startswith="code_number:", state=AddAccount.A4)
async def receive_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, num_1, num_2 = data.get("msg_to_edit"), data.get("num_1"), data.get("num_2")
    num_3 = call.data.split(":")[1]
    code = num_1 + num_2 + num_3
    await msg_to_edit.edit_text(f"<b>–ö–æ–¥ –±—É–¥–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —Ç—É—Ç: <code>{code}</code></b>", reply_markup=code_menu)
    await AddAccount.next()
    await state.update_data(num_3=num_3)


@dp.callback_query_handler(text_startswith="code_number:", state=AddAccount.A5)
async def receive_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, num_1, num_2, num_3 = data.get("msg_to_edit"), data.get("num_1"), data.get("num_2"), data.get("num_3")
    num_4 = call.data.split(":")[1]
    code = num_1 + num_2 + num_3 + num_4
    await msg_to_edit.edit_text(f"<b>–ö–æ–¥ –±—É–¥–µ—Ç –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —Ç—É—Ç: <code>{code}</code></b>", reply_markup=code_menu)
    await AddAccount.next()
    await state.update_data(num_4=num_4)


@dp.callback_query_handler(state=AddAccount.A6)
async def receive_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, num_1, num_2, num_3 = data.get("msg_to_edit"), data.get("num_1"), data.get("num_2"), data.get("num_3")
    number, num_4, sent, code_hash = data.get("number"), data.get("num_4"), data.get("sent"), data.get("code_hash")
    num_5 = call.data.split(":")[1]
    code = num_1 + num_2 + num_3 + num_4 + num_5
    try:
        client = TelegramClient(f"sessions/{number}", api_id, api_hash)
        await client.connect()
        await client.sign_in(phone=number, code=code, phone_code_hash=code_hash)
        await client.disconnect()
        await update_session(call.from_user.id, call.from_user.id)
        await add_acc(call.from_user.id, number)
        await msg_to_edit.edit_text(f"<b>–ì–æ—Ç–æ–≤–æ, –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω</b>", reply_markup=back_to_main_menu)
        await update_acc_count()
        await state.finish()
    except Exception as e:
        print(e)
        await msg_to_edit.edit_text("–ù–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=back_to_main_menu)
        await state.finish()
